{"ast":null,"code":"var querystring = require('querystring'),\n  crypto = require('crypto'),\n  https = require('https'),\n  http = require('http'),\n  URL = require('url'),\n  OAuthUtils = require('./_utils');\nexports.OAuth2 = function (clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n  this._clientId = clientId;\n  this._clientSecret = clientSecret;\n  this._baseSite = baseSite;\n  this._authorizeUrl = authorizePath || \"/oauth/authorize\";\n  this._accessTokenUrl = accessTokenPath || \"/oauth/access_token\";\n  this._accessTokenName = \"access_token\";\n  this._authMethod = \"Bearer\";\n  this._customHeaders = customHeaders || {};\n  this._useAuthorizationHeaderForGET = false;\n\n  //our agent\n  this._agent = undefined;\n};\n\n// Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\nexports.OAuth2.prototype.setAgent = function (agent) {\n  this._agent = agent;\n};\n\n// This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\nexports.OAuth2.prototype.setAccessTokenName = function (name) {\n  this._accessTokenName = name;\n};\n\n// Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\nexports.OAuth2.prototype.setAuthMethod = function (authMethod) {\n  this._authMethod = authMethod;\n};\n\n// If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function (useIt) {\n  this._useAuthorizationHeaderForGET = useIt;\n};\nexports.OAuth2.prototype._getAccessTokenUrl = function () {\n  return this._baseSite + this._accessTokenUrl; /* + \"?\" + querystring.stringify(params); */\n};\n\n// Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\nexports.OAuth2.prototype.buildAuthHeader = function (token) {\n  return this._authMethod + ' ' + token;\n};\nexports.OAuth2.prototype._chooseHttpLibrary = function (parsedUrl) {\n  var http_library = https;\n  // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n  if (parsedUrl.protocol != \"https:\") {\n    http_library = http;\n  }\n  return http_library;\n};\nexports.OAuth2.prototype._request = function (method, url, headers, post_body, access_token, callback) {\n  var parsedUrl = URL.parse(url, true);\n  if (parsedUrl.protocol == \"https:\" && !parsedUrl.port) {\n    parsedUrl.port = 443;\n  }\n  var http_library = this._chooseHttpLibrary(parsedUrl);\n  var realHeaders = {};\n  for (var key in this._customHeaders) {\n    realHeaders[key] = this._customHeaders[key];\n  }\n  if (headers) {\n    for (var key in headers) {\n      realHeaders[key] = headers[key];\n    }\n  }\n  realHeaders['Host'] = parsedUrl.host;\n  if (!realHeaders['User-Agent']) {\n    realHeaders['User-Agent'] = 'Node-oauth';\n  }\n  if (post_body) {\n    if (Buffer.isBuffer(post_body)) {\n      realHeaders[\"Content-Length\"] = post_body.length;\n    } else {\n      realHeaders[\"Content-Length\"] = Buffer.byteLength(post_body);\n    }\n  } else {\n    realHeaders[\"Content-length\"] = 0;\n  }\n  if (access_token && !('Authorization' in realHeaders)) {\n    if (!parsedUrl.query) parsedUrl.query = {};\n    parsedUrl.query[this._accessTokenName] = access_token;\n  }\n  var queryStr = querystring.stringify(parsedUrl.query);\n  if (queryStr) queryStr = \"?\" + queryStr;\n  var options = {\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname + queryStr,\n    method: method,\n    headers: realHeaders\n  };\n  this._executeRequest(http_library, options, post_body, callback);\n};\nexports.OAuth2.prototype._executeRequest = function (http_library, options, post_body, callback) {\n  // Some hosts *cough* google appear to close the connection early / send no content-length header\n  // allow this behaviour.\n  var allowEarlyClose = OAuthUtils.isAnEarlyCloseHost(options.host);\n  var callbackCalled = false;\n  function passBackControl(response, result) {\n    if (!callbackCalled) {\n      callbackCalled = true;\n      if (!(response.statusCode >= 200 && response.statusCode <= 299) && response.statusCode != 301 && response.statusCode != 302) {\n        callback({\n          statusCode: response.statusCode,\n          data: result\n        });\n      } else {\n        callback(null, result, response);\n      }\n    }\n  }\n  var result = \"\";\n\n  //set the agent on the request options\n  if (this._agent) {\n    options.agent = this._agent;\n  }\n  var request = http_library.request(options);\n  request.on('response', function (response) {\n    response.on(\"data\", function (chunk) {\n      result += chunk;\n    });\n    response.on(\"close\", function (err) {\n      if (allowEarlyClose) {\n        passBackControl(response, result);\n      }\n    });\n    response.addListener(\"end\", function () {\n      passBackControl(response, result);\n    });\n  });\n  request.on('error', function (e) {\n    callbackCalled = true;\n    callback(e);\n  });\n  if ((options.method == 'POST' || options.method == 'PUT') && post_body) {\n    request.write(post_body);\n  }\n  request.end();\n};\nexports.OAuth2.prototype.getAuthorizeUrl = function (params) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n};\nexports.OAuth2.prototype.getOAuthAccessToken = function (code, params, callback) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  params['client_secret'] = this._clientSecret;\n  var codeParam = params.grant_type === 'refresh_token' ? 'refresh_token' : 'code';\n  params[codeParam] = code;\n  var post_data = querystring.stringify(params);\n  var post_headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function (error, data, response) {\n    if (error) callback(error);else {\n      var results;\n      try {\n        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n        // responses should be in JSON\n        results = JSON.parse(data);\n      } catch (e) {\n        // .... However both Facebook + Github currently use rev05 of the spec\n        // and neither seem to specify a content-type correctly in their response headers :(\n        // clients of these services will suffer a *minor* performance cost of the exception\n        // being thrown\n        results = querystring.parse(data);\n      }\n      var access_token = results[\"access_token\"];\n      var refresh_token = results[\"refresh_token\"];\n      delete results[\"refresh_token\"];\n      callback(null, access_token, refresh_token, results); // callback results =-=\n    }\n  });\n};\n\n// Deprecated\nexports.OAuth2.prototype.getProtectedResource = function (url, access_token, callback) {\n  this._request(\"GET\", url, {}, \"\", access_token, callback);\n};\nexports.OAuth2.prototype.get = function (url, access_token, callback) {\n  if (this._useAuthorizationHeaderForGET) {\n    var headers = {\n      'Authorization': this.buildAuthHeader(access_token)\n    };\n    access_token = null;\n  } else {\n    headers = {};\n  }\n  this._request(\"GET\", url, headers, \"\", access_token, callback);\n};","map":{"version":3,"names":["querystring","require","crypto","https","http","URL","OAuthUtils","exports","OAuth2","clientId","clientSecret","baseSite","authorizePath","accessTokenPath","customHeaders","_clientId","_clientSecret","_baseSite","_authorizeUrl","_accessTokenUrl","_accessTokenName","_authMethod","_customHeaders","_useAuthorizationHeaderForGET","_agent","undefined","prototype","setAgent","agent","setAccessTokenName","name","setAuthMethod","authMethod","useAuthorizationHeaderforGET","useIt","_getAccessTokenUrl","buildAuthHeader","token","_chooseHttpLibrary","parsedUrl","http_library","protocol","_request","method","url","headers","post_body","access_token","callback","parse","port","realHeaders","key","host","Buffer","isBuffer","length","byteLength","query","queryStr","stringify","options","hostname","path","pathname","_executeRequest","allowEarlyClose","isAnEarlyCloseHost","callbackCalled","passBackControl","response","result","statusCode","data","request","on","chunk","err","addListener","e","write","end","getAuthorizeUrl","params","getOAuthAccessToken","code","codeParam","grant_type","post_data","post_headers","error","results","JSON","refresh_token","getProtectedResource","get"],"sources":["C:/Users/Suweb Reza/OneDrive/Desktop/yello code hackathon/yellocodefrontend/node_modules/oauth/lib/oauth2.js"],"sourcesContent":["var querystring= require('querystring'),\n    crypto= require('crypto'),\n    https= require('https'),\n    http= require('http'),\n    URL= require('url'),\n    OAuthUtils= require('./_utils');\n\nexports.OAuth2= function(clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n  this._clientId= clientId;\n  this._clientSecret= clientSecret;\n  this._baseSite= baseSite;\n  this._authorizeUrl= authorizePath || \"/oauth/authorize\";\n  this._accessTokenUrl= accessTokenPath || \"/oauth/access_token\";\n  this._accessTokenName= \"access_token\";\n  this._authMethod= \"Bearer\";\n  this._customHeaders = customHeaders || {};\n  this._useAuthorizationHeaderForGET= false;\n\n  //our agent\n  this._agent = undefined;\n};\n\n// Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\nexports.OAuth2.prototype.setAgent = function(agent) {\n  this._agent = agent;\n};\n\n// This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\nexports.OAuth2.prototype.setAccessTokenName= function ( name ) {\n  this._accessTokenName= name;\n}\n\n// Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\nexports.OAuth2.prototype.setAuthMethod = function ( authMethod ) {\n  this._authMethod = authMethod;\n};\n\n\n// If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function(useIt) {\n  this._useAuthorizationHeaderForGET= useIt;\n}\n\nexports.OAuth2.prototype._getAccessTokenUrl= function() {\n  return this._baseSite + this._accessTokenUrl; /* + \"?\" + querystring.stringify(params); */\n}\n\n// Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\nexports.OAuth2.prototype.buildAuthHeader= function(token) {\n  return this._authMethod + ' ' + token;\n};\n\nexports.OAuth2.prototype._chooseHttpLibrary= function( parsedUrl ) {\n  var http_library= https;\n  // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n  if( parsedUrl.protocol != \"https:\" ) {\n    http_library= http;\n  }\n  return http_library;\n};\n\nexports.OAuth2.prototype._request= function(method, url, headers, post_body, access_token, callback) {\n\n  var parsedUrl= URL.parse( url, true );\n  if( parsedUrl.protocol == \"https:\" && !parsedUrl.port ) {\n    parsedUrl.port= 443;\n  }\n\n  var http_library= this._chooseHttpLibrary( parsedUrl );\n\n\n  var realHeaders= {};\n  for( var key in this._customHeaders ) {\n    realHeaders[key]= this._customHeaders[key];\n  }\n  if( headers ) {\n    for(var key in headers) {\n      realHeaders[key] = headers[key];\n    }\n  }\n  realHeaders['Host']= parsedUrl.host;\n\n  if (!realHeaders['User-Agent']) {\n    realHeaders['User-Agent'] = 'Node-oauth';\n  }\n\n  if( post_body ) {\n      if ( Buffer.isBuffer(post_body) ) {\n          realHeaders[\"Content-Length\"]= post_body.length;\n      } else {\n          realHeaders[\"Content-Length\"]= Buffer.byteLength(post_body);\n      }\n  } else {\n      realHeaders[\"Content-length\"]= 0;\n  }\n\n  if( access_token && !('Authorization' in realHeaders)) {\n    if( ! parsedUrl.query ) parsedUrl.query= {};\n    parsedUrl.query[this._accessTokenName]= access_token;\n  }\n\n  var queryStr= querystring.stringify(parsedUrl.query);\n  if( queryStr ) queryStr=  \"?\" + queryStr;\n  var options = {\n    host:parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname + queryStr,\n    method: method,\n    headers: realHeaders\n  };\n\n  this._executeRequest( http_library, options, post_body, callback );\n}\n\nexports.OAuth2.prototype._executeRequest= function( http_library, options, post_body, callback ) {\n  // Some hosts *cough* google appear to close the connection early / send no content-length header\n  // allow this behaviour.\n  var allowEarlyClose= OAuthUtils.isAnEarlyCloseHost(options.host);\n  var callbackCalled= false;\n  function passBackControl( response, result ) {\n    if(!callbackCalled) {\n      callbackCalled=true;\n      if( !(response.statusCode >= 200 && response.statusCode <= 299) && (response.statusCode != 301) && (response.statusCode != 302) ) {\n        callback({ statusCode: response.statusCode, data: result });\n      } else {\n        callback(null, result, response);\n      }\n    }\n  }\n\n  var result= \"\";\n\n  //set the agent on the request options\n  if (this._agent) {\n    options.agent = this._agent;\n  }\n\n  var request = http_library.request(options);\n  request.on('response', function (response) {\n    response.on(\"data\", function (chunk) {\n      result+= chunk\n    });\n    response.on(\"close\", function (err) {\n      if( allowEarlyClose ) {\n        passBackControl( response, result );\n      }\n    });\n    response.addListener(\"end\", function () {\n      passBackControl( response, result );\n    });\n  });\n  request.on('error', function(e) {\n    callbackCalled= true;\n    callback(e);\n  });\n\n  if( (options.method == 'POST' || options.method == 'PUT') && post_body ) {\n     request.write(post_body);\n  }\n  request.end();\n}\n\nexports.OAuth2.prototype.getAuthorizeUrl= function( params ) {\n  var params= params || {};\n  params['client_id'] = this._clientId;\n  return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n}\n\nexports.OAuth2.prototype.getOAuthAccessToken= function(code, params, callback) {\n  var params= params || {};\n  params['client_id'] = this._clientId;\n  params['client_secret'] = this._clientSecret;\n  var codeParam = (params.grant_type === 'refresh_token') ? 'refresh_token' : 'code';\n  params[codeParam]= code;\n\n  var post_data= querystring.stringify( params );\n  var post_headers= {\n       'Content-Type': 'application/x-www-form-urlencoded'\n   };\n\n\n  this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function(error, data, response) {\n    if( error )  callback(error);\n    else {\n      var results;\n      try {\n        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n        // responses should be in JSON\n        results= JSON.parse( data );\n      }\n      catch(e) {\n        // .... However both Facebook + Github currently use rev05 of the spec\n        // and neither seem to specify a content-type correctly in their response headers :(\n        // clients of these services will suffer a *minor* performance cost of the exception\n        // being thrown\n        results= querystring.parse( data );\n      }\n      var access_token= results[\"access_token\"];\n      var refresh_token= results[\"refresh_token\"];\n      delete results[\"refresh_token\"];\n      callback(null, access_token, refresh_token, results); // callback results =-=\n    }\n  });\n}\n\n// Deprecated\nexports.OAuth2.prototype.getProtectedResource= function(url, access_token, callback) {\n  this._request(\"GET\", url, {}, \"\", access_token, callback );\n}\n\nexports.OAuth2.prototype.get= function(url, access_token, callback) {\n  if( this._useAuthorizationHeaderForGET ) {\n    var headers= {'Authorization': this.buildAuthHeader(access_token) }\n    access_token= null;\n  }\n  else {\n    headers= {};\n  }\n  this._request(\"GET\", url, headers, \"\", access_token, callback );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}