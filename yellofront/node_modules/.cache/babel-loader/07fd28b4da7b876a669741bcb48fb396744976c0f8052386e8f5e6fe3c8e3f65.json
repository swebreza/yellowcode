{"ast":null,"code":"import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}","map":{"version":3,"names":["_assign","_identity","_isArrayLike","_isTransformer","objOf","_stepCatArray","Array","xs","x","push","_stepCatString","String","a","b","_stepCatObject","Object","result","input","_stepCat","obj","Error"],"sources":["C:/Users/Suweb Reza/OneDrive/Desktop/yello code hackathon/yellocodefrontend/node_modules/ramda/es/internal/_stepCat.js"],"sourcesContent":["import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\n\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,UAAU;AAE5B,IAAIC,aAAa,GAAG;EAClB,mBAAmB,EAAEC,KAAK;EAC1B,mBAAmB,EAAE,UAAUC,EAAE,EAAEC,CAAC,EAAE;IACpCD,EAAE,CAACE,IAAI,CAACD,CAAC,CAAC;IACV,OAAOD,EAAE;EACX,CAAC;EACD,qBAAqB,EAAEN;AACzB,CAAC;AACD,IAAIS,cAAc,GAAG;EACnB,mBAAmB,EAAEC,MAAM;EAC3B,mBAAmB,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACnC,OAAOD,CAAC,GAAGC,CAAC;EACd,CAAC;EACD,qBAAqB,EAAEZ;AACzB,CAAC;AACD,IAAIa,cAAc,GAAG;EACnB,mBAAmB,EAAEC,MAAM;EAC3B,mBAAmB,EAAE,UAAUC,MAAM,EAAEC,KAAK,EAAE;IAC5C,OAAOjB,OAAO,CAACgB,MAAM,EAAEd,YAAY,CAACe,KAAK,CAAC,GAAGb,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC;EACjF,CAAC;EACD,qBAAqB,EAAEhB;AACzB,CAAC;AAED,eAAe,SAASiB,QAAQ,CAACC,GAAG,EAAE;EACpC,IAAIhB,cAAc,CAACgB,GAAG,CAAC,EAAE;IACvB,OAAOA,GAAG;EACZ;EACA,IAAIjB,YAAY,CAACiB,GAAG,CAAC,EAAE;IACrB,OAAOd,aAAa;EACtB;EACA,IAAI,OAAOc,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOT,cAAc;EACvB;EACA,IAAI,OAAOS,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOL,cAAc;EACvB;EACA,MAAM,IAAIM,KAAK,CAAC,gCAAgC,GAAGD,GAAG,CAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}