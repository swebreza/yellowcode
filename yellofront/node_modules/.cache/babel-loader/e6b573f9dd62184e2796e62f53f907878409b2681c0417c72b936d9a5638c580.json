{"ast":null,"code":"/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 1; /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha1(s) {\n  return rstr2hex(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction b64_sha1(s) {\n  return rstr2b64(rstr_sha1(str2rstr_utf8(s)));\n}\nfunction any_sha1(s, e) {\n  return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\n}\nfunction hex_hmac_sha1(k, d) {\n  return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction b64_hmac_sha1(k, d) {\n  return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction any_hmac_sha1(k, d, e) {\n  return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha1_vm_test() {\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\n * Calculate the SHA1 of a raw string\n */\nfunction rstr_sha1(s) {\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha1(key, data) {\n  var bkey = rstr2binb(key);\n  if (bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n  var ipad = Array(16),\n    opad = Array(16);\n  for (var i = 0; i < 16; i++) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input) {\n  try {\n    hexcase;\n  } catch (e) {\n    hexcase = 0;\n  }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for (var i = 0; i < input.length; i++) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input) {\n  try {\n    b64pad;\n  } catch (e) {\n    b64pad = '';\n  }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for (var i = 0; i < len; i += 3) {\n    var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 > input.length * 8) output += b64pad;else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding) {\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for (i = 0; i < dividend.length; i++) {\n    dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n  while (dividend.length > 0) {\n    quotient = Array();\n    x = 0;\n    for (i = 0; i < dividend.length; i++) {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for (i = remainders.length - 1; i >= 0; i--) output += encoding.charAt(remainders[i]);\n\n  /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n  for (i = output.length; i < full_length; i++) output = encoding[0] + output;\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input) {\n  var output = \"\";\n  var i = -1;\n  var x, y;\n  while (++i < input.length) {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if (x <= 0x7F) output += String.fromCharCode(x);else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length; i++) output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n  return output;\n}\nfunction str2rstr_utf16be(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length; i++) output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input) {\n  var output = Array(input.length >> 2);\n  for (var i = 0; i < output.length; i++) output[i] = 0;\n  for (var i = 0; i < input.length * 8; i += 8) output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n  return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input) {\n  var output = \"\";\n  for (var i = 0; i < input.length * 32; i += 8) output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction binb_sha1(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) w[j] = x[i + j];else w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d) {\n  if (t < 20) return b & c | ~b & d;\n  if (t < 40) return b ^ c ^ d;\n  if (t < 60) return b & c | b & d | c & d;\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\nexports.HMACSHA1 = function (key, data) {\n  return b64_hmac_sha1(key, data);\n};","map":{"version":3,"names":["hexcase","b64pad","hex_sha1","s","rstr2hex","rstr_sha1","str2rstr_utf8","b64_sha1","rstr2b64","any_sha1","e","rstr2any","hex_hmac_sha1","k","d","rstr_hmac_sha1","b64_hmac_sha1","any_hmac_sha1","sha1_vm_test","toLowerCase","binb2rstr","binb_sha1","rstr2binb","length","key","data","bkey","ipad","Array","opad","i","hash","concat","input","hex_tab","output","x","charCodeAt","charAt","tab","len","triplet","j","encoding","divisor","remainders","q","quotient","dividend","Math","ceil","floor","full_length","log","y","String","fromCharCode","str2rstr_utf16le","str2rstr_utf16be","w","a","b","c","olda","oldb","oldc","oldd","olde","bit_rol","t","safe_add","sha1_ft","sha1_kt","lsw","msw","num","cnt","exports","HMACSHA1"],"sources":["C:/Users/Suweb Reza/OneDrive/Desktop/yello code hackathon/yellocodefrontend/node_modules/oauth/lib/sha1.js"],"sourcesContent":["/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 1;  /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\nfunction hex_hmac_sha1(k, d)\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction b64_hmac_sha1(k, d)\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\nfunction any_hmac_sha1(k, d, e)\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha1_vm_test()\n{\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\n}\n\n/*\n * Calculate the SHA1 of a raw string\n */\nfunction rstr_sha1(s)\n{\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha1(key, data)\n{\n  var bkey = rstr2binb(key);\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\n\n  var ipad = Array(16), opad = Array(16);\n  for(var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input)\n{\n  try { hexcase } catch(e) { hexcase=0; }\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var output = \"\";\n  var x;\n  for(var i = 0; i < input.length; i++)\n  {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\n           +  hex_tab.charAt( x        & 0x0F);\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input)\n{\n  try { b64pad } catch(e) { b64pad=''; }\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var output = \"\";\n  var len = input.length;\n  for(var i = 0; i < len; i += 3)\n  {\n    var triplet = (input.charCodeAt(i) << 16)\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\n    for(var j = 0; j < 4; j++)\n    {\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\n    }\n  }\n  return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding)\n{\n  var divisor = encoding.length;\n  var remainders = Array();\n  var i, q, x, quotient;\n\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\n  var dividend = Array(Math.ceil(input.length / 2));\n  for(i = 0; i < dividend.length; i++)\n  {\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n  }\n\n  /*\n   * Repeatedly perform a long division. The binary array forms the dividend,\n   * the length of the encoding is the divisor. Once computed, the quotient\n   * forms the dividend for the next step. We stop when the dividend is zero.\n   * All remainders are stored for later use.\n   */\n  while(dividend.length > 0)\n  {\n    quotient = Array();\n    x = 0;\n    for(i = 0; i < dividend.length; i++)\n    {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n      if(quotient.length > 0 || q > 0)\n        quotient[quotient.length] = q;\n    }\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  /* Convert the remainders to the output string */\n  var output = \"\";\n  for(i = remainders.length - 1; i >= 0; i--)\n    output += encoding.charAt(remainders[i]);\n\n  /* Append leading zero equivalents */\n  var full_length = Math.ceil(input.length * 8 /\n                                    (Math.log(encoding.length) / Math.log(2)))\n  for(i = output.length; i < full_length; i++)\n    output = encoding[0] + output;\n\n  return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input)\n{\n  var output = \"\";\n  var i = -1;\n  var x, y;\n\n  while(++i < input.length)\n  {\n    /* Decode utf-16 surrogate pairs */\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\n    {\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n      i++;\n    }\n\n    /* Encode output as utf-8 */\n    if(x <= 0x7F)\n      output += String.fromCharCode(x);\n    else if(x <= 0x7FF)\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0xFFFF)\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n    else if(x <= 0x1FFFFF)\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\n                                    0x80 | ((x >>> 12) & 0x3F),\n                                    0x80 | ((x >>> 6 ) & 0x3F),\n                                    0x80 | ( x         & 0x3F));\n  }\n  return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\n  return output;\n}\n\nfunction str2rstr_utf16be(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length; i++)\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\n                                   input.charCodeAt(i)        & 0xFF);\n  return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input)\n{\n  var output = Array(input.length >> 2);\n  for(var i = 0; i < output.length; i++)\n    output[i] = 0;\n  for(var i = 0; i < input.length * 8; i += 8)\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\n  return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input)\n{\n  var output = \"\";\n  for(var i = 0; i < input.length * 32; i += 8)\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\n  return output;\n}\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction binb_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for(var j = 0; j < 80; j++)\n    {\n      if(j < 16) w[j] = x[i + j];\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return Array(a, b, c, d, e);\n\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if(t < 20) return (b & c) | ((~b) & d);\n  if(t < 40) return b ^ c ^ d;\n  if(t < 60) return (b & c) | (b & d) | (c & d);\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nexports.HMACSHA1= function(key, data) {\n  return b64_hmac_sha1(key, data);\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,CAAC,CAAC,CAAE;AAClB,IAAIC,MAAM,GAAI,GAAG,CAAC,CAAC;;AAEnB;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAACC,CAAC,EAAK;EAAE,OAAOC,QAAQ,CAACC,SAAS,CAACC,aAAa,CAACH,CAAC,CAAC,CAAC,CAAC;AAAE;AACxE,SAASI,QAAQ,CAACJ,CAAC,EAAK;EAAE,OAAOK,QAAQ,CAACH,SAAS,CAACC,aAAa,CAACH,CAAC,CAAC,CAAC,CAAC;AAAE;AACxE,SAASM,QAAQ,CAACN,CAAC,EAAEO,CAAC,EAAE;EAAE,OAAOC,QAAQ,CAACN,SAAS,CAACC,aAAa,CAACH,CAAC,CAAC,CAAC,EAAEO,CAAC,CAAC;AAAE;AAC3E,SAASE,aAAa,CAACC,CAAC,EAAEC,CAAC,EACzB;EAAE,OAAOV,QAAQ,CAACW,cAAc,CAACT,aAAa,CAACO,CAAC,CAAC,EAAEP,aAAa,CAACQ,CAAC,CAAC,CAAC,CAAC;AAAE;AACzE,SAASE,aAAa,CAACH,CAAC,EAAEC,CAAC,EACzB;EAAE,OAAON,QAAQ,CAACO,cAAc,CAACT,aAAa,CAACO,CAAC,CAAC,EAAEP,aAAa,CAACQ,CAAC,CAAC,CAAC,CAAC;AAAE;AACzE,SAASG,aAAa,CAACJ,CAAC,EAAEC,CAAC,EAAEJ,CAAC,EAC5B;EAAE,OAAOC,QAAQ,CAACI,cAAc,CAACT,aAAa,CAACO,CAAC,CAAC,EAAEP,aAAa,CAACQ,CAAC,CAAC,CAAC,EAAEJ,CAAC,CAAC;AAAE;;AAE5E;AACA;AACA;AACA,SAASQ,YAAY,GACrB;EACE,OAAOhB,QAAQ,CAAC,KAAK,CAAC,CAACiB,WAAW,EAAE,IAAI,0CAA0C;AACpF;;AAEA;AACA;AACA;AACA,SAASd,SAAS,CAACF,CAAC,EACpB;EACE,OAAOiB,SAAS,CAACC,SAAS,CAACC,SAAS,CAACnB,CAAC,CAAC,EAAEA,CAAC,CAACoB,MAAM,GAAG,CAAC,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;AACA,SAASR,cAAc,CAACS,GAAG,EAAEC,IAAI,EACjC;EACE,IAAIC,IAAI,GAAGJ,SAAS,CAACE,GAAG,CAAC;EACzB,IAAGE,IAAI,CAACH,MAAM,GAAG,EAAE,EAAEG,IAAI,GAAGL,SAAS,CAACK,IAAI,EAAEF,GAAG,CAACD,MAAM,GAAG,CAAC,CAAC;EAE3D,IAAII,IAAI,GAAGC,KAAK,CAAC,EAAE,CAAC;IAAEC,IAAI,GAAGD,KAAK,CAAC,EAAE,CAAC;EACtC,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAC1B;IACEH,IAAI,CAACG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,CAAC,GAAG,UAAU;IAC9BD,IAAI,CAACC,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,CAAC,GAAG,UAAU;EAChC;EAEA,IAAIC,IAAI,GAAGV,SAAS,CAACM,IAAI,CAACK,MAAM,CAACV,SAAS,CAACG,IAAI,CAAC,CAAC,EAAE,GAAG,GAAGA,IAAI,CAACF,MAAM,GAAG,CAAC,CAAC;EACzE,OAAOH,SAAS,CAACC,SAAS,CAACQ,IAAI,CAACG,MAAM,CAACD,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;AAC3D;;AAEA;AACA;AACA;AACA,SAAS3B,QAAQ,CAAC6B,KAAK,EACvB;EACE,IAAI;IAAEjC,OAAO;EAAC,CAAC,CAAC,OAAMU,CAAC,EAAE;IAAEV,OAAO,GAAC,CAAC;EAAE;EACtC,IAAIkC,OAAO,GAAGlC,OAAO,GAAG,kBAAkB,GAAG,kBAAkB;EAC/D,IAAImC,MAAM,GAAG,EAAE;EACf,IAAIC,CAAC;EACL,KAAI,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACV,MAAM,EAAEO,CAAC,EAAE,EACpC;IACEM,CAAC,GAAGH,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC;IACvBK,MAAM,IAAID,OAAO,CAACI,MAAM,CAAEF,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC,GAChCF,OAAO,CAACI,MAAM,CAAEF,CAAC,GAAU,IAAI,CAAC;EAC5C;EACA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAAS3B,QAAQ,CAACyB,KAAK,EACvB;EACE,IAAI;IAAEhC,MAAM;EAAC,CAAC,CAAC,OAAMS,CAAC,EAAE;IAAET,MAAM,GAAC,EAAE;EAAE;EACrC,IAAIsC,GAAG,GAAG,kEAAkE;EAC5E,IAAIJ,MAAM,GAAG,EAAE;EACf,IAAIK,GAAG,GAAGP,KAAK,CAACV,MAAM;EACtB,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,GAAG,EAAEV,CAAC,IAAI,CAAC,EAC9B;IACE,IAAIW,OAAO,GAAIR,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC,IAAI,EAAE,IACzBA,CAAC,GAAG,CAAC,GAAGU,GAAG,GAAGP,KAAK,CAACI,UAAU,CAACP,CAAC,GAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAC7CA,CAAC,GAAG,CAAC,GAAGU,GAAG,GAAGP,KAAK,CAACI,UAAU,CAACP,CAAC,GAAC,CAAC,CAAC,GAAQ,CAAC,CAAC;IAC5D,KAAI,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EACzB;MACE,IAAGZ,CAAC,GAAG,CAAC,GAAGY,CAAC,GAAG,CAAC,GAAGT,KAAK,CAACV,MAAM,GAAG,CAAC,EAAEY,MAAM,IAAIlC,MAAM,CAAC,KACjDkC,MAAM,IAAII,GAAG,CAACD,MAAM,CAAEG,OAAO,KAAK,CAAC,IAAE,CAAC,GAACC,CAAC,CAAC,GAAI,IAAI,CAAC;IACzD;EACF;EACA,OAAOP,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAASxB,QAAQ,CAACsB,KAAK,EAAEU,QAAQ,EACjC;EACE,IAAIC,OAAO,GAAGD,QAAQ,CAACpB,MAAM;EAC7B,IAAIsB,UAAU,GAAGjB,KAAK,EAAE;EACxB,IAAIE,CAAC,EAAEgB,CAAC,EAAEV,CAAC,EAAEW,QAAQ;;EAErB;EACA,IAAIC,QAAQ,GAAGpB,KAAK,CAACqB,IAAI,CAACC,IAAI,CAACjB,KAAK,CAACV,MAAM,GAAG,CAAC,CAAC,CAAC;EACjD,KAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,QAAQ,CAACzB,MAAM,EAAEO,CAAC,EAAE,EACnC;IACEkB,QAAQ,CAAClB,CAAC,CAAC,GAAIG,KAAK,CAACI,UAAU,CAACP,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAIG,KAAK,CAACI,UAAU,CAACP,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAMkB,QAAQ,CAACzB,MAAM,GAAG,CAAC,EACzB;IACEwB,QAAQ,GAAGnB,KAAK,EAAE;IAClBQ,CAAC,GAAG,CAAC;IACL,KAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkB,QAAQ,CAACzB,MAAM,EAAEO,CAAC,EAAE,EACnC;MACEM,CAAC,GAAG,CAACA,CAAC,IAAI,EAAE,IAAIY,QAAQ,CAAClB,CAAC,CAAC;MAC3BgB,CAAC,GAAGG,IAAI,CAACE,KAAK,CAACf,CAAC,GAAGQ,OAAO,CAAC;MAC3BR,CAAC,IAAIU,CAAC,GAAGF,OAAO;MAChB,IAAGG,QAAQ,CAACxB,MAAM,GAAG,CAAC,IAAIuB,CAAC,GAAG,CAAC,EAC7BC,QAAQ,CAACA,QAAQ,CAACxB,MAAM,CAAC,GAAGuB,CAAC;IACjC;IACAD,UAAU,CAACA,UAAU,CAACtB,MAAM,CAAC,GAAGa,CAAC;IACjCY,QAAQ,GAAGD,QAAQ;EACrB;;EAEA;EACA,IAAIZ,MAAM,GAAG,EAAE;EACf,KAAIL,CAAC,GAAGe,UAAU,CAACtB,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EACxCK,MAAM,IAAIQ,QAAQ,CAACL,MAAM,CAACO,UAAU,CAACf,CAAC,CAAC,CAAC;;EAE1C;EACA,IAAIsB,WAAW,GAAGH,IAAI,CAACC,IAAI,CAACjB,KAAK,CAACV,MAAM,GAAG,CAAC,IACT0B,IAAI,CAACI,GAAG,CAACV,QAAQ,CAACpB,MAAM,CAAC,GAAG0B,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5E,KAAIvB,CAAC,GAAGK,MAAM,CAACZ,MAAM,EAAEO,CAAC,GAAGsB,WAAW,EAAEtB,CAAC,EAAE,EACzCK,MAAM,GAAGQ,QAAQ,CAAC,CAAC,CAAC,GAAGR,MAAM;EAE/B,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA,SAAS7B,aAAa,CAAC2B,KAAK,EAC5B;EACE,IAAIE,MAAM,GAAG,EAAE;EACf,IAAIL,CAAC,GAAG,CAAC,CAAC;EACV,IAAIM,CAAC,EAAEkB,CAAC;EAER,OAAM,EAAExB,CAAC,GAAGG,KAAK,CAACV,MAAM,EACxB;IACE;IACAa,CAAC,GAAGH,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC;IACvBwB,CAAC,GAAGxB,CAAC,GAAG,CAAC,GAAGG,KAAK,CAACV,MAAM,GAAGU,KAAK,CAACI,UAAU,CAACP,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACtD,IAAG,MAAM,IAAIM,CAAC,IAAIA,CAAC,IAAI,MAAM,IAAI,MAAM,IAAIkB,CAAC,IAAIA,CAAC,IAAI,MAAM,EAC3D;MACElB,CAAC,GAAG,OAAO,IAAI,CAACA,CAAC,GAAG,MAAM,KAAK,EAAE,CAAC,IAAIkB,CAAC,GAAG,MAAM,CAAC;MACjDxB,CAAC,EAAE;IACL;;IAEA;IACA,IAAGM,CAAC,IAAI,IAAI,EACVD,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAACpB,CAAC,CAAC,CAAC,KAC9B,IAAGA,CAAC,IAAI,KAAK,EAChBD,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAC,IAAI,GAAKpB,CAAC,KAAK,CAAC,GAAK,IAAK,EAC1B,IAAI,GAAKA,CAAC,GAAW,IAAK,CAAC,CAAC,KACvD,IAAGA,CAAC,IAAI,MAAM,EACjBD,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAC,IAAI,GAAKpB,CAAC,KAAK,EAAE,GAAI,IAAK,EAC1B,IAAI,GAAKA,CAAC,KAAK,CAAC,GAAK,IAAK,EAC1B,IAAI,GAAKA,CAAC,GAAW,IAAK,CAAC,CAAC,KACvD,IAAGA,CAAC,IAAI,QAAQ,EACnBD,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAC,IAAI,GAAKpB,CAAC,KAAK,EAAE,GAAI,IAAK,EAC1B,IAAI,GAAKA,CAAC,KAAK,EAAE,GAAI,IAAK,EAC1B,IAAI,GAAKA,CAAC,KAAK,CAAC,GAAK,IAAK,EAC1B,IAAI,GAAKA,CAAC,GAAW,IAAK,CAAC;EAC7D;EACA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAASsB,gBAAgB,CAACxB,KAAK,EAC/B;EACE,IAAIE,MAAM,GAAG,EAAE;EACf,KAAI,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACV,MAAM,EAAEO,CAAC,EAAE,EAClCK,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAEvB,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC,GAAU,IAAI,EACjCG,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC;EACnE,OAAOK,MAAM;AACf;AAEA,SAASuB,gBAAgB,CAACzB,KAAK,EAC/B;EACE,IAAIE,MAAM,GAAG,EAAE;EACf,KAAI,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACV,MAAM,EAAEO,CAAC,EAAE,EAClCK,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAEvB,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC,KAAK,CAAC,GAAI,IAAI,EACjCG,KAAK,CAACI,UAAU,CAACP,CAAC,CAAC,GAAU,IAAI,CAAC;EACnE,OAAOK,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA,SAASb,SAAS,CAACW,KAAK,EACxB;EACE,IAAIE,MAAM,GAAGP,KAAK,CAACK,KAAK,CAACV,MAAM,IAAI,CAAC,CAAC;EACrC,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,MAAM,CAACZ,MAAM,EAAEO,CAAC,EAAE,EACnCK,MAAM,CAACL,CAAC,CAAC,GAAG,CAAC;EACf,KAAI,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACV,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EACzCK,MAAM,CAACL,CAAC,IAAE,CAAC,CAAC,IAAI,CAACG,KAAK,CAACI,UAAU,CAACP,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAM,EAAE,GAAGA,CAAC,GAAG,EAAG;EACnE,OAAOK,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAASf,SAAS,CAACa,KAAK,EACxB;EACE,IAAIE,MAAM,GAAG,EAAE;EACf,KAAI,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACV,MAAM,GAAG,EAAE,EAAEO,CAAC,IAAI,CAAC,EAC1CK,MAAM,IAAIoB,MAAM,CAACC,YAAY,CAAEvB,KAAK,CAACH,CAAC,IAAE,CAAC,CAAC,KAAM,EAAE,GAAGA,CAAC,GAAG,EAAG,GAAI,IAAI,CAAC;EACvE,OAAOK,MAAM;AACf;;AAEA;AACA;AACA;AACA,SAASd,SAAS,CAACe,CAAC,EAAEI,GAAG,EACzB;EACE;EACAJ,CAAC,CAACI,GAAG,IAAI,CAAC,CAAC,IAAI,IAAI,IAAK,EAAE,GAAGA,GAAG,GAAG,EAAG;EACtCJ,CAAC,CAAC,CAAEI,GAAG,GAAG,EAAE,IAAI,CAAC,IAAK,CAAC,IAAI,EAAE,CAAC,GAAGA,GAAG;EAEpC,IAAImB,CAAC,GAAG/B,KAAK,CAAC,EAAE,CAAC;EACjB,IAAIgC,CAAC,GAAI,UAAU;EACnB,IAAIC,CAAC,GAAG,CAAC,SAAS;EAClB,IAAIC,CAAC,GAAG,CAAC,UAAU;EACnB,IAAIhD,CAAC,GAAI,SAAS;EAClB,IAAIJ,CAAC,GAAG,CAAC,UAAU;EAEnB,KAAI,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,CAAC,CAACb,MAAM,EAAEO,CAAC,IAAI,EAAE,EACpC;IACE,IAAIiC,IAAI,GAAGH,CAAC;IACZ,IAAII,IAAI,GAAGH,CAAC;IACZ,IAAII,IAAI,GAAGH,CAAC;IACZ,IAAII,IAAI,GAAGpD,CAAC;IACZ,IAAIqD,IAAI,GAAGzD,CAAC;IAEZ,KAAI,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAC1B;MACE,IAAGA,CAAC,GAAG,EAAE,EAAEiB,CAAC,CAACjB,CAAC,CAAC,GAAGN,CAAC,CAACN,CAAC,GAAGY,CAAC,CAAC,CAAC,KACtBiB,CAAC,CAACjB,CAAC,CAAC,GAAG0B,OAAO,CAACT,CAAC,CAACjB,CAAC,GAAC,CAAC,CAAC,GAAGiB,CAAC,CAACjB,CAAC,GAAC,CAAC,CAAC,GAAGiB,CAAC,CAACjB,CAAC,GAAC,EAAE,CAAC,GAAGiB,CAAC,CAACjB,CAAC,GAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC3D,IAAI2B,CAAC,GAAGC,QAAQ,CAACA,QAAQ,CAACF,OAAO,CAACR,CAAC,EAAE,CAAC,CAAC,EAAEW,OAAO,CAAC7B,CAAC,EAAEmB,CAAC,EAAEC,CAAC,EAAEhD,CAAC,CAAC,CAAC,EAC5CwD,QAAQ,CAACA,QAAQ,CAAC5D,CAAC,EAAEiD,CAAC,CAACjB,CAAC,CAAC,CAAC,EAAE8B,OAAO,CAAC9B,CAAC,CAAC,CAAC,CAAC;MACzDhC,CAAC,GAAGI,CAAC;MACLA,CAAC,GAAGgD,CAAC;MACLA,CAAC,GAAGM,OAAO,CAACP,CAAC,EAAE,EAAE,CAAC;MAClBA,CAAC,GAAGD,CAAC;MACLA,CAAC,GAAGS,CAAC;IACP;IAEAT,CAAC,GAAGU,QAAQ,CAACV,CAAC,EAAEG,IAAI,CAAC;IACrBF,CAAC,GAAGS,QAAQ,CAACT,CAAC,EAAEG,IAAI,CAAC;IACrBF,CAAC,GAAGQ,QAAQ,CAACR,CAAC,EAAEG,IAAI,CAAC;IACrBnD,CAAC,GAAGwD,QAAQ,CAACxD,CAAC,EAAEoD,IAAI,CAAC;IACrBxD,CAAC,GAAG4D,QAAQ,CAAC5D,CAAC,EAAEyD,IAAI,CAAC;EACvB;EACA,OAAOvC,KAAK,CAACgC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEhD,CAAC,EAAEJ,CAAC,CAAC;AAE7B;;AAEA;AACA;AACA;AACA;AACA,SAAS6D,OAAO,CAACF,CAAC,EAAER,CAAC,EAAEC,CAAC,EAAEhD,CAAC,EAC3B;EACE,IAAGuD,CAAC,GAAG,EAAE,EAAE,OAAQR,CAAC,GAAGC,CAAC,GAAM,CAACD,CAAC,GAAI/C,CAAE;EACtC,IAAGuD,CAAC,GAAG,EAAE,EAAE,OAAOR,CAAC,GAAGC,CAAC,GAAGhD,CAAC;EAC3B,IAAGuD,CAAC,GAAG,EAAE,EAAE,OAAQR,CAAC,GAAGC,CAAC,GAAKD,CAAC,GAAG/C,CAAE,GAAIgD,CAAC,GAAGhD,CAAE;EAC7C,OAAO+C,CAAC,GAAGC,CAAC,GAAGhD,CAAC;AAClB;;AAEA;AACA;AACA;AACA,SAAS0D,OAAO,CAACH,CAAC,EAClB;EACE,OAAQA,CAAC,GAAG,EAAE,GAAK,UAAU,GAAIA,CAAC,GAAG,EAAE,GAAK,UAAU,GAC9CA,CAAC,GAAG,EAAE,GAAI,CAAC,UAAU,GAAG,CAAC,SAAS;AAC5C;;AAEA;AACA;AACA;AACA;AACA,SAASC,QAAQ,CAAClC,CAAC,EAAEkB,CAAC,EACtB;EACE,IAAImB,GAAG,GAAG,CAACrC,CAAC,GAAG,MAAM,KAAKkB,CAAC,GAAG,MAAM,CAAC;EACrC,IAAIoB,GAAG,GAAG,CAACtC,CAAC,IAAI,EAAE,KAAKkB,CAAC,IAAI,EAAE,CAAC,IAAImB,GAAG,IAAI,EAAE,CAAC;EAC7C,OAAQC,GAAG,IAAI,EAAE,GAAKD,GAAG,GAAG,MAAO;AACrC;;AAEA;AACA;AACA;AACA,SAASL,OAAO,CAACO,GAAG,EAAEC,GAAG,EACzB;EACE,OAAQD,GAAG,IAAIC,GAAG,GAAKD,GAAG,KAAM,EAAE,GAAGC,GAAK;AAC5C;AAEAC,OAAO,CAACC,QAAQ,GAAE,UAAStD,GAAG,EAAEC,IAAI,EAAE;EACpC,OAAOT,aAAa,CAACQ,GAAG,EAAEC,IAAI,CAAC;AACjC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}