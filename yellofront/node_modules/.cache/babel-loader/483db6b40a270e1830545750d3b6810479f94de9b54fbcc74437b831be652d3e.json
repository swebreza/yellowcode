{"ast":null,"code":"import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _makeFlat from './internal/_makeFlat';\nimport _xchain from './internal/_xchain';\nimport map from './map';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;","map":{"version":3,"names":["_curry2","_dispatchable","_makeFlat","_xchain","map","chain","fn","monad","x"],"sources":["C:/Users/Suweb Reza/OneDrive/Desktop/yello code hackathon/yellocodefrontend/node_modules/ramda/es/chain.js"],"sourcesContent":["import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _makeFlat from './internal/_makeFlat';\nimport _xchain from './internal/_xchain';\nimport map from './map';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,aAAa,MAAM,0BAA0B;AACpD,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAG,aAAaL,OAAO,EAAE,aAAaC,aAAa,CAAC,CAAC,oBAAoB,EAAE,OAAO,CAAC,EAAEE,OAAO,EAAE,SAASE,KAAK,CAACC,EAAE,EAAEC,KAAK,EAAE;EAC/H,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;IAC/B,OAAO,UAAUC,CAAC,EAAE;MAClB,OAAOF,EAAE,CAACC,KAAK,CAACC,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC;IACxB,CAAC;EACH;EACA,OAAON,SAAS,CAAC,KAAK,CAAC,CAACE,GAAG,CAACE,EAAE,EAAEC,KAAK,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AACH,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}