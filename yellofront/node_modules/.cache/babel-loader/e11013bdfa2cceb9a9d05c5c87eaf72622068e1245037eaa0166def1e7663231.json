{"ast":null,"code":"module.exports = function () {\n  'use strict';\n\n  const {\n    OAuth2\n  } = require('oauth');\n  const querystring = require('querystring');\n  const promisify = require('es6-promisify');\n  const validate = require('validate.js');\n  const R = require('./ramda.js');\n  const {\n    LOG_LEVELS,\n    getLogger\n  } = require('./logger.js');\n  const {\n    splitwisifyParameters,\n    getSplitwiseErrors\n  } = require('./utils.js');\n  const {\n    METHOD_VERBS,\n    PROP_NAMES,\n    ID_PARAM_NAMES,\n    API_URL\n  } = require('./constants.js');\n  const METHODS = {\n    TEST: {\n      endpoint: 'test',\n      methodName: 'test',\n      verb: METHOD_VERBS.GET\n    },\n    GET_CURRENCIES: {\n      endpoint: 'get_currencies',\n      methodName: 'getCurrencies',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.CURRENCIES\n    },\n    GET_CATEGORIES: {\n      endpoint: 'get_categories',\n      methodName: 'getCategories',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.CATEGORIES\n    },\n    PARSE_SENTENCE: {\n      endpoint: 'parse_sentence',\n      methodName: 'parseSentence',\n      verb: METHOD_VERBS.POST,\n      paramNames: ['input', 'group_id', 'friend_id', 'autosave']\n    },\n    GET_CURRENT_USER: {\n      endpoint: 'get_current_user',\n      methodName: 'getCurrentUser',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.USER\n    },\n    GET_USER: {\n      endpoint: 'get_user',\n      methodName: 'getUser',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.USER,\n      idParamName: ID_PARAM_NAMES.USER\n    },\n    UPDATE_USER: {\n      endpoint: 'update_user',\n      methodName: 'updateUser',\n      verb: METHOD_VERBS.PUT,\n      propName: PROP_NAMES.USER,\n      idParamName: ID_PARAM_NAMES.USER,\n      paramNames: ['first_name', 'last_name', 'email', 'password', 'locale', 'date_format', 'default_currency', 'default_group_id', 'notification_settings']\n    },\n    GET_GROUPS: {\n      endpoint: 'get_groups',\n      methodName: 'getGroups',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.GROUPS\n    },\n    GET_GROUP: {\n      endpoint: 'get_group',\n      methodName: 'getGroup',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.GROUP,\n      idParamName: ID_PARAM_NAMES.GROUP\n    },\n    CREATE_GROUP: {\n      endpoint: 'create_group',\n      methodName: 'createGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.GROUP,\n      paramNames: ['name', 'group_type', 'country_code', 'users']\n    },\n    DELETE_GROUP: {\n      endpoint: 'delete_group',\n      methodName: 'deleteGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: PROP_NAMES.GROUP\n    },\n    ADD_USER_TO_GROUP: {\n      endpoint: 'add_user_to_group',\n      methodName: 'addUserToGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      paramNames: ['group_id', 'user_id', 'first_name', 'last_name', 'email']\n    },\n    REMOVE_USER_FROM_GROUP: {\n      endpoint: 'remove_user_from_group',\n      methodName: 'removeUserFromGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      paramNames: ['user_id', 'group_id']\n    },\n    GET_EXPENSES: {\n      endpoint: 'get_expenses',\n      methodName: 'getExpenses',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.EXPENSES,\n      paramNames: ['group_id', 'friendship_id', 'dated_after', 'dated_before', 'updated_after', 'updated_before', 'limit', 'offset']\n    },\n    GET_EXPENSE: {\n      endpoint: 'get_expense',\n      methodName: 'getExpense',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.EXPENSE,\n      idParamName: ID_PARAM_NAMES.EXPENSE\n    },\n    CREATE_EXPENSE: {\n      endpoint: 'create_expense',\n      methodName: 'createExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.EXPENSES,\n      paramNames: ['payment', 'cost', 'description', 'group_id', 'friendship_id', 'details', 'creation_method', 'date', 'repeat_interval', 'currency_code', 'category_id', 'users']\n    },\n    UPDATE_EXPENSE: {\n      endpoint: 'update_expense',\n      methodName: 'updateExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.EXPENSES,\n      idParamName: ID_PARAM_NAMES.EXPENSE,\n      paramNames: ['group_id', 'friendship_id', 'expense_bundle_id', 'description', 'details', 'payment', 'cost', 'date', 'category_id', 'users']\n    },\n    DELETE_EXPENSE: {\n      endpoint: 'delete_expense',\n      methodName: 'deleteExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: ID_PARAM_NAMES.EXPENSE\n    },\n    GET_FRIENDS: {\n      endpoint: 'get_friends',\n      methodName: 'getFriends',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.FRIENDS\n    },\n    GET_FRIEND: {\n      endpoint: 'get_friend',\n      methodName: 'getFriend',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.FRIEND,\n      idParamName: ID_PARAM_NAMES.FRIEND\n    },\n    CREATE_FRIEND: {\n      endpoint: 'create_friend',\n      methodName: 'createFriend',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.FRIENDS,\n      paramNames: ['user_email', 'user_first_name', 'user_last_name']\n    },\n    CREATE_FRIENDS: {\n      endpoint: 'create_friends',\n      methodName: 'createFriends',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.FRIENDS,\n      paramNames: ['friends']\n    },\n    DELETE_FRIEND: {\n      endpoint: 'delete_friend',\n      methodName: 'deleteFriend',\n      verb: METHOD_VERBS.DELETE,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: ID_PARAM_NAMES.FRIEND\n    },\n    GET_NOTIFICATIONS: {\n      endpoint: 'get_notifications',\n      methodName: 'getNotifications',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.NOTIFICATIONS,\n      paramNames: ['updated_after', 'limit']\n    },\n    GET_MAIN_DATA: {\n      endpoint: 'get_main_data',\n      methodName: 'getMainData',\n      verb: METHOD_VERBS.GET,\n      paramNames: ['no_expenses', 'limit', 'cachebust']\n    }\n  };\n\n  /**\n   * Consistently handles error scenarios\n   * @param {Object} options - `fail` consumes arguments via an options object\n   * @param {string} options.context - The context in which the error occured\n   * @param {string} options.message - A description of the error\n   * @param {Function} options.callback - Will be called with the error as it's first argument\n   * @param {Function} options.logger - Will be called with a message and the ERROR log level\n   * @param {boolean} options.shouldThrow - Rather than returning a promise, will throw an error\n   * @returns {Promise.<Error>} A promise that has been rejected with an Error\n   */\n  const fail = function () {\n    let {\n      context,\n      message,\n      callback,\n      logger,\n      shouldThrow\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const contextPrefix = context ? `${context} - ` : '';\n    const errorMessage = `${contextPrefix}${message}`;\n    if (logger) {\n      logger({\n        level: LOG_LEVELS.ERROR,\n        message: errorMessage\n      });\n    }\n    const error = new Error(errorMessage);\n    if (shouldThrow) {\n      throw error;\n    }\n    if (callback) {\n      callback(error, null);\n    }\n    return Promise.reject(error);\n  };\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method which can make oauth requests\n   */\n  const getOAuthRequestWrapper = (logger, oauth2) => {\n    // eslint-disable-next-line no-underscore-dangle\n    const oAuthRequest = promisify(oauth2._request, {\n      thisArg: oauth2\n    });\n    const oAuthRequestWrapperFail = message => fail({\n      logger,\n      message,\n      context: 'oAuthRequestWrapper'\n    });\n\n    /**\n     * Make an oauth request\n     * @param {string} url - The endpoint to send a request to\n     * @param {string} verb - Which http verb to use\n     * @param {Object} data - The data to be sent along with the request\n     * @param {string} accessToken - The oauth access token\n     * @returns {Promise} The data from the endpoint\n     */\n    const oAuthRequestWrapper = (url, verb, data, accessToken) => {\n      if (!url) {\n        return oAuthRequestWrapperFail('a URL must be provided');\n      }\n      if (!METHOD_VERBS[verb]) {\n        return oAuthRequestWrapperFail('unknown http verb');\n      }\n      if (!accessToken) {\n        return oAuthRequestWrapperFail('an access token must be provided');\n      }\n      return oAuthRequest(verb, url, {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: oauth2.buildAuthHeader(accessToken)\n      }, querystring.stringify(data), null);\n    };\n    return oAuthRequestWrapper;\n  };\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns A method for making requests to Splitwise\n   */\n  const getSplitwiseRequest = (logger, oauth2) => {\n    const oAuthGet = promisify(oauth2.get, {\n      thisArg: oauth2\n    });\n    const splitwiseRequestFail = message => fail({\n      logger,\n      message,\n      context: 'splitwiseRequest'\n    });\n\n    /**\n     * Make a request to splitwise\n     * @param {string} endpoint - The endpoint to send a request to\n     * @returns {Promise} The data returned from Splitwise\n     */\n    const splitwiseRequest = endpoint => {\n      if (!endpoint) {\n        return splitwiseRequestFail('an endpoint must be specified');\n      }\n      return accessToken => oAuthGet(`${API_URL}${endpoint}`, accessToken).then(JSON.parse);\n    };\n    return splitwiseRequest;\n  };\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method for making requests with data to Splitwise\n   */\n  const getSplitwiseRequestWithData = (logger, oauth2) => {\n    const oAuthRequestWrapper = getOAuthRequestWrapper(logger, oauth2);\n    const splitwiseRequestWithDataFail = message => fail({\n      logger,\n      message,\n      context: 'splitwiseRequestWithData'\n    });\n\n    /**\n     * Make a request with data to Splitwise\n     * @param {string} endpoint - The endpoint to send a request to\n     * @param {string} verb - Which http verb to use\n     * @param {Object} data - The data to be sent along with the request\n     * @returns {Promise} The data returned from Splitwise\n     */\n    const splitwiseRequestWithData = (endpoint, verb, data) => {\n      if (!endpoint) {\n        return splitwiseRequestWithDataFail('an endpoint must be specified');\n      }\n      if (!data) {\n        return splitwiseRequestWithDataFail('data must be provided');\n      }\n      return accessToken => oAuthRequestWrapper(`${API_URL}${endpoint}`, verb, splitwisifyParameters(data),\n      // un-nest data, and convert bools into numbers\n      accessToken).then(JSON.parse);\n    };\n    return splitwiseRequestWithData;\n  };\n\n  /**\n   * Returns a promise for a Splitwise access token\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Promise.<string>} A Splitwise access token\n   */\n  const getAccessTokenPromise = (logger, oauth2) => {\n    const getOAuthAccessToken = promisify(oauth2.getOAuthAccessToken, {\n      thisArg: oauth2\n    });\n    const accessTokenPromise = getOAuthAccessToken('', {\n      grant_type: 'client_credentials'\n    });\n    accessTokenPromise.then(() => {\n      logger({\n        message: 'successfully aquired access token'\n      });\n    }, () => {});\n    const handledAccessToken = accessTokenPromise.catch(error => {\n      const data = (() => {\n        try {\n          return JSON.parse(error.data);\n        } catch (e) {}\n        return null;\n      })();\n      const reason = (() => {\n        if (data && data.error === 'invalid_client') {\n          return 'your credentials are incorrect';\n        }\n        if (error && error.statusCode >= 400 && error.statusCode < 500) {\n          return 'client error';\n        }\n        if (error && error.statusCode >= 500 && error.statusCode < 600) {\n          return 'server error';\n        }\n        return 'unknown error';\n      })();\n      return fail({\n        logger,\n        message: `authentication failed - ${reason}`\n      });\n    });\n    return handledAccessToken;\n  };\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Promise.<string>} accessTokenPromise - A promise for a Splitwise access token\n   * @param {Object} defaultIDs - A map of IDs to use by default if one is not provided\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method for generating methods for interacting with Splitwise\n   */\n  const getEndpointMethodGenerator = (logger, accessTokenPromise, defaultIDs, oauth2) => {\n    const splitwiseRequest = getSplitwiseRequest(logger, oauth2);\n    const splitwiseRequestWithData = getSplitwiseRequestWithData(logger, oauth2);\n    const endpointMethodGeneratorFail = message => fail({\n      logger,\n      message,\n      shouldThrow: true,\n      context: 'endpointMethodGenerator'\n    });\n\n    /**\n     * @param {string} verb - Which http verb to use\n     * @param {string} endpoint - Which Splitwise endpoint to use\n     * @param {string} propName - The key under which the return value is nested\n     * @param {string} methodName - The returned method will have this name bound to it\n     * @param {string} idParamName - The name of the default ID to use\n     * @param {string[]} paramNames - The names of the parameters to expect\n     * @param {Object} constraints - validate.js constraints on the params\n     * @returns {Function} A method for interacting with a Splitwise endpoint\n     */\n    const endpointMethodGenerator = _ref => {\n      let {\n        verb,\n        endpoint,\n        propName,\n        methodName,\n        idParamName,\n        paramNames = [],\n        constraints = {}\n      } = _ref;\n      if (!endpoint) {\n        endpointMethodGeneratorFail('an endpoint must be specified');\n      }\n      if (!METHOD_VERBS[verb]) {\n        endpointMethodGeneratorFail('unknown http verb');\n      }\n      if (!methodName) {\n        endpointMethodGeneratorFail('a method name must be provided');\n      }\n      const wrappedFail = _ref2 => {\n        let {\n          message,\n          callback\n        } = _ref2;\n        return fail({\n          logger,\n          message,\n          callback,\n          context: methodName\n        });\n      };\n      const augmentedConstraints = (() => {\n        if (idParamName) {\n          return R.assoc('id', {\n            presence: {\n              allowEmpty: false\n            }\n          }, constraints);\n        }\n        return constraints;\n      })();\n      const makeErrorMessage = errors => {\n        if (errors.length === 0) {\n          return '';\n        }\n        if (errors.length === 1) {\n          return `${methodName} - ${errors[0]}`;\n        }\n        return errors.reduce((messageSoFar, nextError) => {\n          return `${messageSoFar}\\n - ${nextError}`;\n        }, `${methodName}:`);\n      };\n\n      /**\n       * Makes a call to a specific Splitwise endpoint\n       * @param {Object} params - Arguments to be passed to the endpoint\n       * @param {Function} callback - Will be called with the error as the first arg,\n       *                              and the results as the second\n       * @returns {Promise} An error or the response from the endpoint\n       */\n      const wrapped = function () {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let callback = arguments.length > 1 ? arguments[1] : undefined;\n        const id = idParamName && (String(params.id) || String(defaultIDs[idParamName])) || '';\n        const augmentedParams = R.assoc('id', id, params);\n\n        // Ensure the provided params are valid\n        const allErrors = validate(augmentedParams, augmentedConstraints, {\n          fullMessages: false\n        });\n        if (allErrors) {\n          const flattenedErrors = R.flatten(R.toPairs(allErrors).map(_ref3 => {\n            let [argument, errors] = _ref3;\n            return errors.map(error => `\\`${argument}\\` ${error}`);\n          }));\n          const message = makeErrorMessage(flattenedErrors);\n          return wrappedFail({\n            message,\n            callback\n          });\n        }\n        let url = `${endpoint}/${id}`;\n        // Get the access token\n        let resultPromise = accessTokenPromise;\n        resultPromise.then(() => {\n          logger({\n            message: `${methodName} - making request`\n          });\n        }, () => {});\n\n        // Make the request\n        if (verb === METHOD_VERBS.GET) {\n          const queryParams = querystring.stringify(R.pick(paramNames, params));\n          if (queryParams) {\n            url = `${url}?${queryParams}`;\n          }\n          resultPromise = resultPromise.then(splitwiseRequest(url));\n        } else {\n          resultPromise = resultPromise.then(splitwiseRequestWithData(url, verb, R.pick(paramNames, params)));\n        }\n\n        // Handle any errors\n        resultPromise = resultPromise.then(result => {\n          const errors = getSplitwiseErrors(R.pick(['error', 'errors'], result));\n          const message = makeErrorMessage(errors) || result.success === false && 'request was unsuccessful';\n          if (message) {\n            return wrappedFail({\n              message,\n              callback\n            });\n          }\n          logger({\n            message: `${methodName} - successfully made request`\n          });\n          return result;\n        }, error => {\n          const errors = getSplitwiseErrors(error);\n          let message = makeErrorMessage(errors) || 'request was unsuccessful';\n          return wrappedFail({\n            message,\n            callback\n          });\n        });\n\n        // Return data, not nested within an object\n        if (propName) {\n          resultPromise = resultPromise.then(val => R.propOr(val, propName, val));\n        }\n\n        // Annoying edge case\n        if (endpoint === 'create_expense') {\n          resultPromise = resultPromise.then(val => val[0]);\n        }\n\n        // Call the callback if it's given\n        if (callback) {\n          resultPromise.then(result => {\n            callback(null, result);\n          }, error => {\n            callback(error, null);\n          });\n        }\n        return resultPromise;\n      };\n\n      // Assign the method's name far the sake of stack traces\n      Object.defineProperty(wrapped, 'name', {\n        value: methodName,\n        writable: false\n      });\n      return wrapped;\n    };\n    return endpointMethodGenerator;\n  };\n\n  /**\n   * @class\n   */\n  class Splitwise {\n    constructor(options) {\n      const consumerKey = options.consumerKey;\n      const consumerSecret = options.consumerSecret;\n      const accessToken = options.accessToken;\n      const defaultIDs = {\n        groupID: options.group_id,\n        userID: options.user_id,\n        expenseID: options.expense_id,\n        friendID: options.friend_id\n      };\n      const logger = getLogger(options.logger, options.logLevel);\n      if (!consumerKey || !consumerSecret) {\n        const message = 'both a consumer key, and a consumer secret must be provided';\n        logger({\n          level: LOG_LEVELS.ERROR,\n          message\n        });\n        throw new Error(message);\n      }\n      const oauth2 = new OAuth2(consumerKey, consumerSecret, 'https://secure.splitwise.com/', null, 'oauth/token', null);\n      const accessTokenPromise = (() => {\n        if (accessToken) {\n          logger({\n            message: 'using provided access token'\n          });\n          return Promise.resolve(accessToken);\n        } else {\n          logger({\n            message: 'making request for access token'\n          });\n          return getAccessTokenPromise(logger, oauth2);\n        }\n      })();\n      const generateEndpointMethod = getEndpointMethodGenerator(logger, accessTokenPromise, defaultIDs, oauth2);\n\n      // Each of the provided methods is generated from an element in METHODS\n      // and added as an instance method\n      R.values(METHODS).forEach(method => {\n        this[method.methodName] = generateEndpointMethod(method);\n      });\n      this.getAccessToken = () => accessTokenPromise;\n    }\n\n    // Bonus utility method for easily making transactions from one person to one person\n    createDebt(_ref4) {\n      let {\n        from,\n        to,\n        amount,\n        description,\n        group_id\n      } = _ref4;\n      return this.createExpense({\n        description,\n        group_id,\n        payment: false,\n        cost: amount,\n        users: [{\n          user_id: from,\n          paid_share: amount\n        }, {\n          user_id: to,\n          owed_share: amount\n        }]\n      });\n    }\n  }\n\n  /**\n   * We don't want a class to be visible in the public API, so it's hidden in this factory method\n   */\n  return opts => new Splitwise(opts);\n}();","map":{"version":3,"names":["module","exports","OAuth2","require","querystring","promisify","validate","R","LOG_LEVELS","getLogger","splitwisifyParameters","getSplitwiseErrors","METHOD_VERBS","PROP_NAMES","ID_PARAM_NAMES","API_URL","METHODS","TEST","endpoint","methodName","verb","GET","GET_CURRENCIES","propName","CURRENCIES","GET_CATEGORIES","CATEGORIES","PARSE_SENTENCE","POST","paramNames","GET_CURRENT_USER","USER","GET_USER","idParamName","UPDATE_USER","PUT","GET_GROUPS","GROUPS","GET_GROUP","GROUP","CREATE_GROUP","DELETE_GROUP","SUCCESS","ADD_USER_TO_GROUP","REMOVE_USER_FROM_GROUP","GET_EXPENSES","EXPENSES","GET_EXPENSE","EXPENSE","CREATE_EXPENSE","UPDATE_EXPENSE","DELETE_EXPENSE","GET_FRIENDS","FRIENDS","GET_FRIEND","FRIEND","CREATE_FRIEND","CREATE_FRIENDS","DELETE_FRIEND","DELETE","GET_NOTIFICATIONS","NOTIFICATIONS","GET_MAIN_DATA","fail","context","message","callback","logger","shouldThrow","contextPrefix","errorMessage","level","ERROR","error","Error","Promise","reject","getOAuthRequestWrapper","oauth2","oAuthRequest","_request","thisArg","oAuthRequestWrapperFail","oAuthRequestWrapper","url","data","accessToken","Authorization","buildAuthHeader","stringify","getSplitwiseRequest","oAuthGet","get","splitwiseRequestFail","splitwiseRequest","then","JSON","parse","getSplitwiseRequestWithData","splitwiseRequestWithDataFail","splitwiseRequestWithData","getAccessTokenPromise","getOAuthAccessToken","accessTokenPromise","grant_type","handledAccessToken","catch","e","reason","statusCode","getEndpointMethodGenerator","defaultIDs","endpointMethodGeneratorFail","endpointMethodGenerator","constraints","wrappedFail","augmentedConstraints","assoc","presence","allowEmpty","makeErrorMessage","errors","length","reduce","messageSoFar","nextError","wrapped","params","id","String","augmentedParams","allErrors","fullMessages","flattenedErrors","flatten","toPairs","map","argument","resultPromise","queryParams","pick","result","success","val","propOr","Object","defineProperty","value","writable","Splitwise","constructor","options","consumerKey","consumerSecret","groupID","group_id","userID","user_id","expenseID","expense_id","friendID","friend_id","logLevel","resolve","generateEndpointMethod","values","forEach","method","getAccessToken","createDebt","from","to","amount","description","createExpense","payment","cost","users","paid_share","owed_share","opts"],"sources":["C:/Users/Suweb Reza/OneDrive/Desktop/yello code hackathon/yellocodefrontend/node_modules/splitwise/src/splitwise.js"],"sourcesContent":["module.exports = (function () {\n  'use strict'\n\n  const { OAuth2 } = require('oauth')\n  const querystring = require('querystring')\n  const promisify = require('es6-promisify')\n  const validate = require('validate.js')\n\n  const R = require('./ramda.js')\n  const { LOG_LEVELS, getLogger } = require('./logger.js')\n  const { splitwisifyParameters, getSplitwiseErrors } = require('./utils.js')\n  const { METHOD_VERBS, PROP_NAMES, ID_PARAM_NAMES, API_URL } = require('./constants.js')\n\n  const METHODS = {\n    TEST: {\n      endpoint: 'test',\n      methodName: 'test',\n      verb: METHOD_VERBS.GET\n    },\n    GET_CURRENCIES: {\n      endpoint: 'get_currencies',\n      methodName: 'getCurrencies',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.CURRENCIES\n    },\n    GET_CATEGORIES: {\n      endpoint: 'get_categories',\n      methodName: 'getCategories',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.CATEGORIES\n    },\n    PARSE_SENTENCE: {\n      endpoint: 'parse_sentence',\n      methodName: 'parseSentence',\n      verb: METHOD_VERBS.POST,\n      paramNames: ['input', 'group_id', 'friend_id', 'autosave']\n    },\n    GET_CURRENT_USER: {\n      endpoint: 'get_current_user',\n      methodName: 'getCurrentUser',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.USER\n    },\n    GET_USER: {\n      endpoint: 'get_user',\n      methodName: 'getUser',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.USER,\n      idParamName: ID_PARAM_NAMES.USER\n    },\n    UPDATE_USER: {\n      endpoint: 'update_user',\n      methodName: 'updateUser',\n      verb: METHOD_VERBS.PUT,\n      propName: PROP_NAMES.USER,\n      idParamName: ID_PARAM_NAMES.USER,\n      paramNames: [\n        'first_name',\n        'last_name',\n        'email',\n        'password',\n        'locale',\n        'date_format',\n        'default_currency',\n        'default_group_id',\n        'notification_settings'\n      ]\n    },\n    GET_GROUPS: {\n      endpoint: 'get_groups',\n      methodName: 'getGroups',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.GROUPS\n    },\n    GET_GROUP: {\n      endpoint: 'get_group',\n      methodName: 'getGroup',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.GROUP,\n      idParamName: ID_PARAM_NAMES.GROUP\n    },\n    CREATE_GROUP: {\n      endpoint: 'create_group',\n      methodName: 'createGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.GROUP,\n      paramNames: ['name', 'group_type', 'country_code', 'users']\n    },\n    DELETE_GROUP: {\n      endpoint: 'delete_group',\n      methodName: 'deleteGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: PROP_NAMES.GROUP\n    },\n    ADD_USER_TO_GROUP: {\n      endpoint: 'add_user_to_group',\n      methodName: 'addUserToGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      paramNames: ['group_id', 'user_id', 'first_name', 'last_name', 'email']\n    },\n    REMOVE_USER_FROM_GROUP: {\n      endpoint: 'remove_user_from_group',\n      methodName: 'removeUserFromGroup',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      paramNames: ['user_id', 'group_id']\n    },\n    GET_EXPENSES: {\n      endpoint: 'get_expenses',\n      methodName: 'getExpenses',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.EXPENSES,\n      paramNames: [\n        'group_id',\n        'friendship_id',\n        'dated_after',\n        'dated_before',\n        'updated_after',\n        'updated_before',\n        'limit',\n        'offset'\n      ]\n    },\n    GET_EXPENSE: {\n      endpoint: 'get_expense',\n      methodName: 'getExpense',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.EXPENSE,\n      idParamName: ID_PARAM_NAMES.EXPENSE\n    },\n    CREATE_EXPENSE: {\n      endpoint: 'create_expense',\n      methodName: 'createExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.EXPENSES,\n      paramNames: [\n        'payment',\n        'cost',\n        'description',\n        'group_id',\n        'friendship_id',\n        'details',\n        'creation_method',\n        'date',\n        'repeat_interval',\n        'currency_code',\n        'category_id',\n        'users'\n      ]\n    },\n    UPDATE_EXPENSE: {\n      endpoint: 'update_expense',\n      methodName: 'updateExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.EXPENSES,\n      idParamName: ID_PARAM_NAMES.EXPENSE,\n      paramNames: [\n        'group_id',\n        'friendship_id',\n        'expense_bundle_id',\n        'description',\n        'details',\n        'payment',\n        'cost',\n        'date',\n        'category_id',\n        'users'\n      ]\n    },\n    DELETE_EXPENSE: {\n      endpoint: 'delete_expense',\n      methodName: 'deleteExpense',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: ID_PARAM_NAMES.EXPENSE\n    },\n    GET_FRIENDS: {\n      endpoint: 'get_friends',\n      methodName: 'getFriends',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.FRIENDS\n    },\n    GET_FRIEND: {\n      endpoint: 'get_friend',\n      methodName: 'getFriend',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.FRIEND,\n      idParamName: ID_PARAM_NAMES.FRIEND\n    },\n    CREATE_FRIEND: {\n      endpoint: 'create_friend',\n      methodName: 'createFriend',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.FRIENDS,\n      paramNames: ['user_email', 'user_first_name', 'user_last_name']\n    },\n    CREATE_FRIENDS: {\n      endpoint: 'create_friends',\n      methodName: 'createFriends',\n      verb: METHOD_VERBS.POST,\n      propName: PROP_NAMES.FRIENDS,\n      paramNames: ['friends']\n    },\n    DELETE_FRIEND: {\n      endpoint: 'delete_friend',\n      methodName: 'deleteFriend',\n      verb: METHOD_VERBS.DELETE,\n      propName: PROP_NAMES.SUCCESS,\n      idParamName: ID_PARAM_NAMES.FRIEND\n    },\n    GET_NOTIFICATIONS: {\n      endpoint: 'get_notifications',\n      methodName: 'getNotifications',\n      verb: METHOD_VERBS.GET,\n      propName: PROP_NAMES.NOTIFICATIONS,\n      paramNames: ['updated_after', 'limit']\n    },\n    GET_MAIN_DATA: {\n      endpoint: 'get_main_data',\n      methodName: 'getMainData',\n      verb: METHOD_VERBS.GET,\n      paramNames: ['no_expenses', 'limit', 'cachebust']\n    }\n  }\n\n  /**\n   * Consistently handles error scenarios\n   * @param {Object} options - `fail` consumes arguments via an options object\n   * @param {string} options.context - The context in which the error occured\n   * @param {string} options.message - A description of the error\n   * @param {Function} options.callback - Will be called with the error as it's first argument\n   * @param {Function} options.logger - Will be called with a message and the ERROR log level\n   * @param {boolean} options.shouldThrow - Rather than returning a promise, will throw an error\n   * @returns {Promise.<Error>} A promise that has been rejected with an Error\n   */\n  const fail = ({context, message, callback, logger, shouldThrow} = {}) => {\n    const contextPrefix = context ? `${context} - ` : ''\n    const errorMessage = `${contextPrefix}${message}`\n    if (logger) {\n      logger({ level: LOG_LEVELS.ERROR, message: errorMessage })\n    }\n    const error = new Error(errorMessage)\n    if (shouldThrow) {\n      throw error\n    }\n    if (callback) {\n      callback(error, null)\n    }\n    return Promise.reject(error)\n  }\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method which can make oauth requests\n   */\n  const getOAuthRequestWrapper = (logger, oauth2) => {\n    // eslint-disable-next-line no-underscore-dangle\n    const oAuthRequest = promisify(oauth2._request, { thisArg: oauth2 })\n    const oAuthRequestWrapperFail = message => fail({\n      logger,\n      message,\n      context: 'oAuthRequestWrapper'\n    })\n\n    /**\n     * Make an oauth request\n     * @param {string} url - The endpoint to send a request to\n     * @param {string} verb - Which http verb to use\n     * @param {Object} data - The data to be sent along with the request\n     * @param {string} accessToken - The oauth access token\n     * @returns {Promise} The data from the endpoint\n     */\n    const oAuthRequestWrapper = (url, verb, data, accessToken) => {\n      if (!url) {\n        return oAuthRequestWrapperFail('a URL must be provided')\n      }\n      if (!METHOD_VERBS[verb]) {\n        return oAuthRequestWrapperFail('unknown http verb')\n      }\n      if (!accessToken) {\n        return oAuthRequestWrapperFail('an access token must be provided')\n      }\n\n      return oAuthRequest(\n        verb,\n        url,\n        {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: oauth2.buildAuthHeader(accessToken)\n        },\n        querystring.stringify(data),\n        null\n      )\n    }\n\n    return oAuthRequestWrapper\n  }\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns A method for making requests to Splitwise\n   */\n  const getSplitwiseRequest = (logger, oauth2) => {\n    const oAuthGet = promisify(oauth2.get, { thisArg: oauth2 })\n    const splitwiseRequestFail = message => fail({\n      logger,\n      message,\n      context: 'splitwiseRequest'\n    })\n\n    /**\n     * Make a request to splitwise\n     * @param {string} endpoint - The endpoint to send a request to\n     * @returns {Promise} The data returned from Splitwise\n     */\n    const splitwiseRequest = (endpoint) => {\n      if (!endpoint) {\n        return splitwiseRequestFail('an endpoint must be specified')\n      }\n\n      return accessToken => oAuthGet(\n        `${API_URL}${endpoint}`,\n        accessToken\n      ).then(JSON.parse)\n    }\n\n    return splitwiseRequest\n  }\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method for making requests with data to Splitwise\n   */\n  const getSplitwiseRequestWithData = (logger, oauth2) => {\n    const oAuthRequestWrapper = getOAuthRequestWrapper(logger, oauth2)\n    const splitwiseRequestWithDataFail = message => fail({\n      logger,\n      message,\n      context: 'splitwiseRequestWithData'\n    })\n\n    /**\n     * Make a request with data to Splitwise\n     * @param {string} endpoint - The endpoint to send a request to\n     * @param {string} verb - Which http verb to use\n     * @param {Object} data - The data to be sent along with the request\n     * @returns {Promise} The data returned from Splitwise\n     */\n    const splitwiseRequestWithData = (endpoint, verb, data) => {\n      if (!endpoint) {\n        return splitwiseRequestWithDataFail('an endpoint must be specified')\n      }\n      if (!data) {\n        return splitwiseRequestWithDataFail('data must be provided')\n      }\n\n      return accessToken => oAuthRequestWrapper(\n        `${API_URL}${endpoint}`,\n        verb,\n        splitwisifyParameters(data), // un-nest data, and convert bools into numbers\n        accessToken\n      ).then(JSON.parse)\n    }\n\n    return splitwiseRequestWithData\n  }\n\n  /**\n   * Returns a promise for a Splitwise access token\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Promise.<string>} A Splitwise access token\n   */\n  const getAccessTokenPromise = (logger, oauth2) => {\n    const getOAuthAccessToken = promisify(\n      oauth2.getOAuthAccessToken,\n      { thisArg: oauth2 }\n    )\n\n    const accessTokenPromise = getOAuthAccessToken('', { grant_type: 'client_credentials' })\n\n    accessTokenPromise.then(() => {\n      logger({ message: 'successfully aquired access token' })\n    }, () => {})\n\n    const handledAccessToken = accessTokenPromise.catch(error => {\n      const data = (() => {\n        try {\n          return JSON.parse(error.data)\n        } catch (e) { }\n        return null\n      })()\n      const reason = (() => {\n        if (data && data.error === 'invalid_client') {\n          return 'your credentials are incorrect'\n        }\n        if (error && error.statusCode >= 400 && error.statusCode < 500) {\n          return 'client error'\n        }\n        if (error && error.statusCode >= 500 && error.statusCode < 600) {\n          return 'server error'\n        }\n        return 'unknown error'\n      })()\n\n      return fail({ logger, message: `authentication failed - ${reason}` })\n    })\n\n    return handledAccessToken\n  }\n\n  /**\n   * @param {Function} logger - The logger provided by getLogger\n   * @param {Promise.<string>} accessTokenPromise - A promise for a Splitwise access token\n   * @param {Object} defaultIDs - A map of IDs to use by default if one is not provided\n   * @param {Object} oauth2 - An instance of OAuth2\n   * @returns {Function} A method for generating methods for interacting with Splitwise\n   */\n  const getEndpointMethodGenerator = (logger, accessTokenPromise, defaultIDs, oauth2) => {\n    const splitwiseRequest = getSplitwiseRequest(logger, oauth2)\n    const splitwiseRequestWithData = getSplitwiseRequestWithData(logger, oauth2)\n    const endpointMethodGeneratorFail = message => fail({\n      logger,\n      message,\n      shouldThrow: true,\n      context: 'endpointMethodGenerator'\n    })\n\n    /**\n     * @param {string} verb - Which http verb to use\n     * @param {string} endpoint - Which Splitwise endpoint to use\n     * @param {string} propName - The key under which the return value is nested\n     * @param {string} methodName - The returned method will have this name bound to it\n     * @param {string} idParamName - The name of the default ID to use\n     * @param {string[]} paramNames - The names of the parameters to expect\n     * @param {Object} constraints - validate.js constraints on the params\n     * @returns {Function} A method for interacting with a Splitwise endpoint\n     */\n    const endpointMethodGenerator = ({\n      verb,\n      endpoint,\n      propName,\n      methodName,\n      idParamName,\n      paramNames = [],\n      constraints = {}\n    }) => {\n      if (!endpoint) {\n        endpointMethodGeneratorFail('an endpoint must be specified')\n      }\n      if (!METHOD_VERBS[verb]) {\n        endpointMethodGeneratorFail('unknown http verb')\n      }\n      if (!methodName) {\n        endpointMethodGeneratorFail('a method name must be provided')\n      }\n      const wrappedFail = ({message, callback}) => fail({\n        logger,\n        message,\n        callback,\n        context: methodName\n      })\n      const augmentedConstraints = (() => {\n        if (idParamName) {\n          return R.assoc(\n            'id',\n            { presence: { allowEmpty: false } },\n            constraints\n          )\n        }\n        return constraints\n      })()\n      const makeErrorMessage = (errors) => {\n        if (errors.length === 0) {\n          return ''\n        }\n        if (errors.length === 1) {\n          return `${methodName} - ${errors[0]}`\n        }\n        return errors.reduce((messageSoFar, nextError) => {\n          return `${messageSoFar}\\n - ${nextError}`\n        }, `${methodName}:`)\n      }\n\n      /**\n       * Makes a call to a specific Splitwise endpoint\n       * @param {Object} params - Arguments to be passed to the endpoint\n       * @param {Function} callback - Will be called with the error as the first arg,\n       *                              and the results as the second\n       * @returns {Promise} An error or the response from the endpoint\n       */\n      const wrapped = (params = {}, callback) => {\n        const id = (idParamName && (String(params.id) || String(defaultIDs[idParamName]))) || ''\n        const augmentedParams = R.assoc(\n          'id',\n          id,\n          params\n        )\n\n        // Ensure the provided params are valid\n        const allErrors = validate(augmentedParams, augmentedConstraints, {fullMessages: false})\n        if (allErrors) {\n          const flattenedErrors = R.flatten(R.toPairs(allErrors).map(([argument, errors]) => {\n            return errors.map(error => `\\`${argument}\\` ${error}`)\n          }))\n\n          const message = makeErrorMessage(flattenedErrors)\n          return wrappedFail({message, callback})\n        }\n\n        let url = `${endpoint}/${id}`\n        // Get the access token\n        let resultPromise = accessTokenPromise\n\n        resultPromise.then(() => {\n          logger({ message: `${methodName} - making request` })\n        }, () => { })\n\n        // Make the request\n        if (verb === METHOD_VERBS.GET) {\n          const queryParams = querystring.stringify(R.pick(paramNames, params))\n\n          if (queryParams) {\n            url = `${url}?${queryParams}`\n          }\n\n          resultPromise = resultPromise.then(splitwiseRequest(url))\n        } else {\n          resultPromise = resultPromise.then(\n            splitwiseRequestWithData(url, verb, R.pick(paramNames, params))\n          )\n        }\n\n        // Handle any errors\n        resultPromise = resultPromise.then(result => {\n          const errors = getSplitwiseErrors(R.pick(['error', 'errors'], result))\n          const message = makeErrorMessage(errors) || (\n            (result.success === false) && 'request was unsuccessful'\n          )\n          if (message) {\n            return wrappedFail({message, callback})\n          }\n          logger({ message: `${methodName} - successfully made request` })\n          return result\n        }, error => {\n          const errors = getSplitwiseErrors(error)\n          let message = makeErrorMessage(errors) || 'request was unsuccessful'\n          return wrappedFail({ message, callback })\n        })\n\n        // Return data, not nested within an object\n        if (propName) {\n          resultPromise = resultPromise.then(val => R.propOr(val, propName, val))\n        }\n\n        // Annoying edge case\n        if (endpoint === 'create_expense') {\n          resultPromise = resultPromise.then(val => val[0])\n        }\n\n        // Call the callback if it's given\n        if (callback) {\n          resultPromise.then(\n            result => {\n              callback(null, result)\n            },\n            error => {\n              callback(error, null)\n            }\n          )\n        }\n\n        return resultPromise\n      }\n\n      // Assign the method's name far the sake of stack traces\n      Object.defineProperty(wrapped, 'name', {\n        value: methodName,\n        writable: false\n      })\n      return wrapped\n    }\n\n    return endpointMethodGenerator\n  }\n\n  /**\n   * @class\n   */\n  class Splitwise {\n    constructor (options) {\n      const consumerKey = options.consumerKey\n      const consumerSecret = options.consumerSecret\n      const accessToken = options.accessToken\n      const defaultIDs = {\n        groupID: options.group_id,\n        userID: options.user_id,\n        expenseID: options.expense_id,\n        friendID: options.friend_id\n      }\n      const logger = getLogger(options.logger, options.logLevel)\n\n      if (!consumerKey || !consumerSecret) {\n        const message = 'both a consumer key, and a consumer secret must be provided'\n        logger({ level: LOG_LEVELS.ERROR, message })\n        throw new Error(message)\n      }\n\n      const oauth2 = new OAuth2(\n        consumerKey,\n        consumerSecret,\n        'https://secure.splitwise.com/',\n        null,\n        'oauth/token',\n        null\n      )\n\n      const accessTokenPromise = (() => {\n        if (accessToken) {\n          logger({ message: 'using provided access token' })\n          return Promise.resolve(accessToken)\n        } else {\n          logger({ message: 'making request for access token' })\n          return getAccessTokenPromise(logger, oauth2)\n        }\n      })()\n\n      const generateEndpointMethod = getEndpointMethodGenerator(\n        logger,\n        accessTokenPromise,\n        defaultIDs,\n        oauth2\n      )\n\n      // Each of the provided methods is generated from an element in METHODS\n      // and added as an instance method\n      R.values(METHODS).forEach(method => {\n        this[method.methodName] = generateEndpointMethod(method)\n      })\n\n      this.getAccessToken = () => accessTokenPromise\n    }\n\n    // Bonus utility method for easily making transactions from one person to one person\n    createDebt ({ from, to, amount, description, group_id }) {\n      return this.createExpense({\n        description,\n        group_id,\n        payment: false,\n        cost: amount,\n        users: [\n          {\n            user_id: from,\n            paid_share: amount\n          },\n          {\n            user_id: to,\n            owed_share: amount\n          }\n        ]\n      })\n    }\n  }\n\n  /**\n   * We don't want a class to be visible in the public API, so it's hidden in this factory method\n   */\n  return (opts) => new Splitwise(opts)\n}())\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}